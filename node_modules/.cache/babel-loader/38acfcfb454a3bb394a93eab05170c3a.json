{"ast":null,"code":"function isCaptureValid(toGoPlace, currentPlace, id, redCircles, blackCircles, isKing, tilesChecked, tilesTaken) {\n  if (currentPlace == toGoPlace) {\n    return tilesTaken;\n  }\n\n  if (redCircles.includes(String(currentPlace)) && id === \"black\" || blackCircles.includes(String(currentPlace)) && id === \"red\") {\n    return undefined;\n  }\n\n  if (!(currentPlace % 2 == 0 && toGoPlace % 2 == 0 || currentPlace % 2 != 0 && toGoPlace % 2 != 0)) {\n    return undefined;\n  }\n\n  tilesChecked.push(currentPlace);\n\n  if (isKing) {\n    if (id === \"black\" && redCircles.includes(String(currentPlace + (8 + 1))) && (currentPlace + (8 + 1) > 8 && currentPlace + (8 + 1)) < 56 && (currentPlace + (8 + 1)) % 8 > 1 && tilesChecked.findIndex(tile => tile === currentPlace + 2 * (8 + 1)) == -1) {\n      let result = isCaptureValid(toGoPlace, currentPlace + 2 * (8 + 1), id, redCircles, blackCircles, isKing, tilesChecked, tilesTaken);\n\n      if (result != undefined) {\n        tilesTaken.push(currentPlace + (8 + 1));\n        return tilesTaken;\n      }\n    }\n\n    if (id === \"black\" && redCircles.includes(String(currentPlace + (8 - 1))) && (currentPlace + (8 - 1) > 8 && currentPlace + (8 - 1)) < 56 && (currentPlace + (8 - 1)) % 8 > 1 && tilesChecked.findIndex(tile => tile === currentPlace + 2 * (8 - 1)) == -1) {\n      let result = isCaptureValid(toGoPlace, currentPlace + 2 * (8 - 1), id, redCircles, blackCircles, isKing, tilesChecked, tilesTaken);\n\n      if (result != undefined) {\n        tilesTaken.push(currentPlace + (8 - 1));\n        return tilesTaken;\n      }\n    }\n\n    if (id === \"red\" && blackCircles.includes(String(currentPlace - (8 + 1))) && (currentPlace - (8 + 1) > 8 && currentPlace - (8 + 1)) < 56 && (currentPlace - (8 + 1)) % 8 > 1 && tilesChecked.findIndex(tile => tile === currentPlace - 2 * (8 + 1)) == -1) {\n      let result = isCaptureValid(toGoPlace, currentPlace - 2 * (8 + 1), id, redCircles, blackCircles, isKing, tilesChecked, tilesTaken);\n\n      if (result != undefined) {\n        tilesTaken.push(currentPlace - (8 + 1));\n        return tilesTaken;\n      }\n    }\n\n    if (id === \"red\" && blackCircles.includes(String(currentPlace - (8 - 1))) && (currentPlace - (8 - 1) > 8 && currentPlace - (8 - 1)) < 56 && (currentPlace - (8 - 1)) % 8 > 1 && tilesChecked.findIndex(tile => tile === currentPlace - 2 * (8 - 1)) == -1) {\n      let result = isCaptureValid(toGoPlace, currentPlace - 2 * (8 - 1), id, redCircles, blackCircles, isKing, tilesChecked, tilesTaken);\n\n      if (result != undefined) {\n        tilesTaken.push(currentPlace - (8 - 1));\n        return tilesTaken;\n      }\n    }\n  }\n\n  if (id === \"black\" && redCircles.includes(String(currentPlace - (8 - 1))) && (currentPlace - (8 - 1) > 8 && currentPlace - (8 - 1)) < 56 && (currentPlace - (8 - 1)) % 8 > 1 && tilesChecked.findIndex(tile => tile === currentPlace - 2 * (8 - 1)) == -1) {\n    let result = isCaptureValid(toGoPlace, currentPlace - 2 * (8 - 1), id, redCircles, blackCircles, isKing, tilesChecked, tilesTaken);\n\n    if (result != undefined) {\n      tilesTaken.push(currentPlace - (8 - 1));\n      return tilesTaken;\n    }\n  }\n\n  if (id === \"black\" && redCircles.includes(String(currentPlace - (8 + 1))) && (currentPlace - (8 + 1) > 8 && currentPlace - (8 + 1)) < 56 && (currentPlace - (8 + 1)) % 8 > 1 && tilesChecked.findIndex(tile => tile === currentPlace - 2 * (8 + 1)) == -1) {\n    let result = isCaptureValid(toGoPlace, currentPlace - 2 * (8 + 1), id, redCircles, blackCircles, isKing, tilesChecked, tilesTaken);\n\n    if (result != undefined) {\n      tilesTaken.push(currentPlace - (8 + 1));\n      return tilesTaken;\n    }\n  }\n\n  if (id === \"red\" && blackCircles.includes(String(currentPlace + (8 - 1))) && (currentPlace + (8 - 1) > 8 && currentPlace + (8 - 1)) < 56 && (currentPlace + (8 - 1)) % 8 > 1 && tilesChecked.findIndex(tile => tile === currentPlace + 2 * (8 - 1)) == -1) {\n    let result = isCaptureValid(toGoPlace, currentPlace + 2 * (8 - 1), id, redCircles, blackCircles, isKing, tilesChecked, tilesTaken);\n\n    if (result != undefined) {\n      tilesTaken.push(currentPlace + (8 - 1));\n      return tilesTaken;\n    }\n  }\n\n  let test = (currentPlace + (8 + 1)) % 8;\n\n  if (id === \"red\" && blackCircles.includes(String(currentPlace + (8 + 1))) && (currentPlace + (8 + 1) > 8 && currentPlace + (8 + 1)) < 56 && (currentPlace + (8 + 1)) % 8 > 1 && tilesChecked.findIndex(tile => tile === currentPlace + 2 * (8 + 1)) == -1) {\n    let result = isCaptureValid(toGoPlace, currentPlace + 2 * (8 + 1), id, redCircles, blackCircles, isKing, tilesChecked, tilesTaken);\n\n    if (result != undefined) {\n      tilesTaken.push(currentPlace + (8 + 1));\n      return tilesTaken;\n    }\n  } else {\n    return undefined;\n  }\n}\n\nexport function isValid(toGoPlace, currentPlace, id, redCircles, blackCircles, isKing) {\n  //checks if any pieces exist on the square the player wants to move to\n  if (currentPlace == toGoPlace) {\n    return false;\n  }\n\n  if (redCircles.includes(String(toGoPlace)) || blackCircles.includes(String(toGoPlace))) {\n    return false;\n  }\n\n  if (isKing) {\n    //checks if a diagonal move is valid for a king piece\n    if (currentPlace - (8 - 1) == toGoPlace || currentPlace - (8 + 1) == toGoPlace || currentPlace + (8 - 1) == toGoPlace || currentPlace + (8 + 1) == toGoPlace) {\n      return true;\n    }\n  }\n\n  if (id === 'red') {\n    if (currentPlace + (8 - 1) == toGoPlace && currentPlace % 8 != 1) {\n      return true;\n    }\n\n    if (currentPlace + (8 + 1) == toGoPlace && currentPlace % 8 != 0) {\n      return true;\n    }\n  }\n\n  if (id === 'black') {\n    if (currentPlace - (8 - 1) == toGoPlace && currentPlace % 8 != 0) {\n      return true;\n    }\n\n    if (currentPlace - (8 + 1) == toGoPlace && currentPlace % 8 != 1) {\n      return true;\n    }\n  } //checks if move is valid \n\n\n  if ((currentPlace + (8 - 1) == toGoPlace || currentPlace + (8 + 1) == toGoPlace) && id === \"red\") {\n    return true; //checks if move is valid\n  } else if ((currentPlace - (8 - 1) == toGoPlace || currentPlace - (8 + 1) == toGoPlace) && id === \"black\") {\n    return true; //checks if move is valid for taking pieces\n  }\n\n  let tilesChecked = [];\n  let tilesTaken = [];\n  return isCaptureValid(toGoPlace, currentPlace, id, redCircles, blackCircles, isKing, tilesChecked, tilesTaken);\n}","map":{"version":3,"sources":["/Users/michael/Desktop/sovereign-page/soveriegn-home/src/isValid.ts"],"names":["isCaptureValid","toGoPlace","currentPlace","id","redCircles","blackCircles","isKing","tilesChecked","tilesTaken","includes","String","undefined","push","findIndex","tile","result","test","isValid"],"mappings":"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","sourcesContent":["function isCaptureValid(toGoPlace : number, currentPlace: number, id : String, redCircles: String[], blackCircles : String[], isKing : boolean, tilesChecked: number[], tilesTaken: number[]) {\n  \n    if (currentPlace == toGoPlace) {\n      return tilesTaken;\n    }\n  \n    if ((redCircles.includes(String(currentPlace)) && id === \"black\") || (blackCircles.includes(String(currentPlace))) && id === \"red\") {\n      return undefined;\n    } \n  \n    if (!((currentPlace % 2 == 0 && toGoPlace % 2 == 0) || (currentPlace % 2 != 0 && toGoPlace % 2 != 0))) {\n      return undefined;\n    }\n  \n    tilesChecked.push(currentPlace);\n  \n      if (isKing) {\n      if (id === \"black\" && redCircles.includes(String(currentPlace + (8+1))) && (currentPlace + (8+1) > 8 && currentPlace + (8+1)) < 56 && (currentPlace + (8+1)) % 8 > 1 && tilesChecked.findIndex((tile: number) => tile === currentPlace + 2*(8+1)) == -1) {\n        let result = isCaptureValid(toGoPlace, currentPlace + 2*(8+1), id, redCircles, blackCircles, isKing, tilesChecked, tilesTaken);\n        if (result != undefined) {\n          tilesTaken.push(currentPlace + (8+1));\n          return tilesTaken;\n        }\n      } if (id === \"black\" && (redCircles.includes(String(currentPlace + (8-1)))) && (currentPlace + (8-1) > 8 && currentPlace + (8-1)) < 56 && (currentPlace + (8-1)) % 8 > 1  && tilesChecked.findIndex((tile: number) => tile === currentPlace + 2*(8-1)) == -1) {\n        let result = isCaptureValid(toGoPlace, currentPlace + 2*(8-1), id, redCircles, blackCircles, isKing, tilesChecked, tilesTaken);\n        if (result != undefined) {\n          tilesTaken.push(currentPlace + (8-1));\n          return tilesTaken;\n        }\n      }\n      \n      if (id === \"red\" &&  blackCircles.includes(String(currentPlace - (8+1))) && (currentPlace - (8+1) > 8 && currentPlace - (8+1)) < 56 && (currentPlace - (8+1)) % 8 > 1  && tilesChecked.findIndex((tile: number) => tile === currentPlace - 2*(8+1)) == -1) {\n        let result = isCaptureValid(toGoPlace, currentPlace - 2*(8+1), id, redCircles, blackCircles, isKing, tilesChecked, tilesTaken);\n        if (result != undefined) {\n          tilesTaken.push(currentPlace - (8+1));\n          return tilesTaken;\n        }\n      }\n  \n      if (id === \"red\" && (blackCircles.includes(String(currentPlace - (8-1)))) && (currentPlace - (8-1) > 8 && currentPlace - (8-1)) < 56 && (currentPlace - (8-1)) % 8 > 1 && tilesChecked.findIndex((tile: number) => tile === currentPlace - 2*(8-1)) == -1) {\n        let result = isCaptureValid(toGoPlace, currentPlace -  2*(8-1), id, redCircles, blackCircles, isKing, tilesChecked, tilesTaken);\n        if (result != undefined) {\n          tilesTaken.push(currentPlace - (8-1));\n          return tilesTaken;\n        }\n      }\n    }\n  \n    if (id === \"black\" && (redCircles.includes(String(currentPlace - (8-1)))) && (currentPlace - (8-1) > 8 && currentPlace - (8-1)) < 56 && (currentPlace - (8-1)) % 8 > 1  && tilesChecked.findIndex((tile: number) => tile === currentPlace - 2*(8-1)) == -1) {\n      let result = isCaptureValid(toGoPlace, currentPlace - 2*(8-1), id, redCircles, blackCircles, isKing, tilesChecked, tilesTaken);\n      if (result != undefined) {\n        tilesTaken.push(currentPlace - (8-1));\n        return tilesTaken;\n      }\n    } \n    \n    if (id === \"black\" && redCircles.includes(String(currentPlace - (8+1))) && (currentPlace - (8+1) > 8 && currentPlace - (8+1)) < 56 && (currentPlace - (8+1)) % 8 > 1 && tilesChecked.findIndex((tile: number) => tile === currentPlace - 2*(8+1)) == -1) {\n      let result = isCaptureValid(toGoPlace, currentPlace - 2*(8+1), id, redCircles, blackCircles, isKing, tilesChecked, tilesTaken);\n      if (result != undefined) {\n        tilesTaken.push(currentPlace - (8+1));\n        return tilesTaken;\n      }\n    } \n    \n    if (id === \"red\" && (blackCircles.includes(String(currentPlace + (8-1)))) && (currentPlace + (8-1) > 8 && currentPlace + (8-1)) < 56 && (currentPlace + (8-1)) % 8 > 1 && tilesChecked.findIndex((tile: number) => tile === currentPlace + 2*(8-1)) == -1) {\n      let result = isCaptureValid(toGoPlace, currentPlace + 2*(8-1), id, redCircles, blackCircles, isKing, tilesChecked, tilesTaken);\n      if (result != undefined) {\n        tilesTaken.push(currentPlace + (8-1));\n        return tilesTaken;\n      }\n    } \n    \n    let test = (currentPlace + (8+1)) % 8;\n    if (id ===\"red\" && blackCircles.includes(String(currentPlace + (8+1))) && (currentPlace + (8+1) > 8 && currentPlace + (8+1)) < 56 && (currentPlace + (8+1)) % 8 > 1 && tilesChecked.findIndex((tile: number) => tile === currentPlace + 2*(8+1)) == -1) {\n      let result = isCaptureValid(toGoPlace, currentPlace + 2*(8+1), id, redCircles, blackCircles, isKing, tilesChecked, tilesTaken);\n      if (result != undefined) {\n        tilesTaken.push(currentPlace + (8+1));\n        return tilesTaken;\n      }\n    } else {\n      return undefined;\n    }\n  }\n\nexport function isValid(toGoPlace : number, currentPlace: number, id : String, redCircles: String[], blackCircles : String[], isKing : boolean) {\n    //checks if any pieces exist on the square the player wants to move to\n      if (currentPlace == toGoPlace) {\n      return false;\n    }\n    \n    if (redCircles.includes(String(toGoPlace)) || blackCircles.includes(String(toGoPlace))) {\n      return false;\n    } \n  \n    if (isKing) {\n        //checks if a diagonal move is valid for a king piece\n        if ((currentPlace - (8-1) == toGoPlace || currentPlace - (8+1) == toGoPlace || currentPlace + (8-1) == toGoPlace || currentPlace + (8+1) == toGoPlace)) {\n          return true;\n        }\n    } \n    \n    if (id === 'red') {\n      if ((currentPlace + (8-1) == toGoPlace) && currentPlace % 8 != 1) {\n        return true;\n      }\n\n      if ((currentPlace + (8+1) == toGoPlace) && currentPlace % 8 != 0) {\n        return true;\n      }\n    }\n\n    if (id === 'black') {\n      if ((currentPlace - (8-1) == toGoPlace) && currentPlace % 8 != 0) {\n        return true;\n      }\n\n      if ((currentPlace - (8+1) == toGoPlace) && currentPlace % 8 != 1) {\n        return true;\n      }\n    }\n    //checks if move is valid \n    if ((currentPlace + (8-1) == toGoPlace || currentPlace + (8+1) == toGoPlace) && id === \"red\") {\n      return true;\n      //checks if move is valid\n    } else if ((currentPlace - (8-1) == toGoPlace || currentPlace - (8+1) == toGoPlace) && id === \"black\") { \n      return true;\n      //checks if move is valid for taking pieces\n    } \n    let tilesChecked: number[] = [];\n    let tilesTaken: number[] = [];\n    return isCaptureValid(toGoPlace, currentPlace, id, redCircles, blackCircles, isKing, tilesChecked, tilesTaken)\n  }"]},"metadata":{},"sourceType":"module"}